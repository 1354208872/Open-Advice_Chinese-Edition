 \chapterwithauthor{Till Adam}{Free Software in Public Administrations}
  
  \authorbio{Originally from a liberal arts and music background, Till Adam has spent the 
 +从最开始的自由艺术和音乐背景，Till Adam在差不多过去的十年都做软件。
  last decade or so in software. He works at KDAB where he directs services, including
 +他在KDAB工作，包括为公司的一些有关自由软件的活动直接提供服务。
  the company's Free Software activities. Till also serves on the board of directors
 +Till也服务于Kolab Systems AG的董事会，
  of Kolab Systems AG, a company with a pure Free Software business model.
 +这是一个纯粹的以自由软件为商业模式的公司。
  He lives with his wife and daughter in Berlin.}
 -
 +他与他的妻子和女儿住在柏林。
  \section*{Introduction}
  
  Like, I imagine, many of the other authors in this collection of essays I
  started contributing to Free Software when I was a student. I had decided
 +我想，同其他许多在收集散文的作家一样，我在学生时代便开始为自由软件做贡献。
  relatively late in life to pursue a degree in Computer Science (having failed
  to become rich and famous as a musician) and was expecting to be quite
  a bit older than my peers when I graduated. So I thought it would be good
 +我已决定在人生的较晚时段去攻读计算机科学的学位（为此已经不再可能再变成富翁而又闻名遐迩的音乐家了），
  并且很可能在我毕业时会比我同龄人更显老一些。
  to teach myself programming, which I was not getting much of at
  school, to become more attractive to future employers, despite my age.
 +所以我认为自学那些我不能再学校学到很多的编程知识是不错的选择,
  尽管我的年龄会很大，但当我成为未来的雇主时会更有魅力,  
  After some forays into various smaller communities I eventually found my way
  into KDE and started working on the email application. Thanks to
 +经过多次涉足各种各样的小社区，我最终用自己的方式成功进入了KDE，并开始致力于电子邮件应用系统。  
  the extremely helpful and technically brilliant group of people I met there I
  was able to learn quickly and contribute meaningfully to the code base, getting
  sucked more and more into both the social circle and the fascinating technical
  problem space of personal information management.
 +感谢在KDE遇到的那群技术一流并且给予我非常多帮助人，我能够学得更效率了，而且对代码库有了更多有意义的贡献，
  并且开始越来越多的涉足社交圈和那迷人的个人信息管理上的技术问题圈。
  
  When KDAB, a company full of KDE people, asked me whether I wanted to help out
  with some commercial work that was being done, as a student job, I was of
  course thrilled to be able to combine making a living with my hobby of hacking
  on KDE software. Over the years I then witnessed the adoption of KDE's personal
 +当一家满是KDE成员的名叫KDAB的公司询问我是否愿意帮忙解决一些即将完工的商业工作，并以此为学生兼职工作时
  我对能将生计和我KDE软件黑客的爱好联系在一起而激动不已。
  information management frameworks and applications by the public sector,
  particularly in Germany, first hand and saw KDAB's business in this area grow.
 +几年来，我目睹了KDE个人信息管理框架被采纳，然后在各公共部门，尤其是在德国，得以广泛应用，
  亲自见证了KDAB业务在这个领域内不断成长。
  As I transitioned into more coordinative roles it eventually became part of my
  job to effectively sell and deliver services based on Free Software including KDE's products
  to large organizations, particularly in the public sector.
 +当我过渡到有更多的协调作用的阶段时，它成为我高效地出售还有提供服务工作的一部分，
  这工作以各种自由软件（包括KDE为大组织写的软件）为基础，特别为公共部门服务。
  
  It should be noted that much of the project work this text reflects upon was done in
  cooperation with other Free Software businesses, namely g10code, the
  maintainers of GNUPG and cryptography specialists, and Intevation, a consultancy focused
  entirely on Free Software and its strategic challenges and opportunities. Especially
  有一点需要做下声明：这本书提到的很多的工程任务是和其他的自由软件企业一起合作完成的，
  例如：GNUPG的维护人员和密码专家组成的g10code，还有专注于自由软件及其战略挑战与机遇的咨询公司Intevation。
  Bernhard Reiter, one of Intevation's founders, was instrumental to the selling and
  running of many of these projects and whatever morsels of wisdom this text might contain
  are likely products of his analysis and my many conversations with him over the years.
  尤其是Bernhard Reiter，Intevation的创始人之一，对这些工程的销售和运行，还有本文任何需要小智慧的点点滴滴，
  比如他精准的产品分析以及这么多年来与我的许多交谈，都具有十分重大的意义。
  
  So if Bernhard and I could travel back in time and share insights with our younger, more
  naïve selves, what would those insights be? Well, it turns out they all start with the
  letter 'P'.
  因而，如果Bernhard和我能够及时旅行归来，然后和我们的年轻人分享一些人生感悟，更加天真的本性，
  那么，我想谈的思考究竟会是什么呢？哦，我想说：“原来万物都是从字母‘P’开始的。”
  
  \section*{People}
  
  As things stand today it is still harder for IT operations people and decision
  makers to use Free Software than it is to use proprietary alternatives. Even in
  如今的状况是IT操作员和决策者们依旧难以有选择地使用自由软件。
  Germany, where Free Software has relatively strong political backing, it is
  easier and safer to suggest the use of something that is perceived as ``industry
  standard'' or ``what everyone else does''; proprietary solutions, in other words.
  甚至在对自由软件已有强力政治支持的德国，出于简单安全的考虑，人们还是建议使用那些被认为“产业标准”或者“民意所趋”的软件；
  换句话说，这是当今的主流选择。
  Someone who proposes a Free Software solution will likely face opposition by
  less adventurous (or more short-sighted) colleagues, close scrutiny by
  superiors, higher expectations with respect to the results and unrealistic
  budget pressure. It thus requires a special breed of person willing to take
  那些提出自由软件办法的人，很可能要直面少部分爱冒险的和大部分目光短浅的同行们的反对，
  面对领导的过分关注，面对那些期待结果的支持者的过分高期望，还有那不切实际的预算压力。
  personal risks, go out on a limb, potentially jeopardize career progress and
  fight an uphill battle. This is of course true in any organization, but in a
  于是乎，我们需要那么一群敢冒险的特殊人，他们需要敢于冒险，
  能在潜在的职业风险中不言退缩而且敢于英勇奋战。
  public administration special persistence is required because things move
  generally more slowly and an inflexible organizational hierarchy and limited
  career options amplify the issue.
  这在任何的组织中都是理所应当的，但是在一个公共管理项目中，还需要其拥有特殊的持久性，
  因为情况变化总体上说还是缓慢的，一个不够灵活的组织结构和人们职业选择时的局限将浮现的问题给放大了。
  
  Without an ally on the inside it can be prohibitively difficult to get
  Free Software options seriously considered. If there is such a person, it is important
  如果没有处在自由软件内部的伙伴，如何谨慎而又周到地选择自由软件对我们而言将是个难于上青天的问题。
  to support them in their internal struggles as much as possible. This
  因而如果有那么一个人，那么他们挣扎的内心将最大限度地得到解脱。
  means providing them with timely, reliable and verifiable information about
  what goes on in the community the organization intends to interface with,
  including enough detail to provide a full picture but reducing the
  complexity of the communication and planing chaos that is part of the Free
  Software way of working, at times, such that it becomes more manageable and
  less threatening. Honesty and reliability help to build strong
  relationships with these key people, the basis of longer term success. As
  their interface to the wondrous and somewhat frightening world of Free
  Software communities they rely on you to find the paths that will carry
  them and their organization to their goals and they make decisions largely
  based on personal trusts. That trust has to be earned and maintained.
  
  In order to achieve this, it is important to focus not only on achieving
  the technical results of projects, but also keep in mind the broader personal and organizational
  goals of those one is dealing with. Success or failure of the current
  project might not depend on whether an agency's project manager can show off
  only marginally related functionality to superiors at seemingly random points
  in the schedule, but whether the next project happens or not might. When you have
  few friends, helping them be successful is a good investment.
  
  \section*{Priorities}
  
  As technologists, Free Software people tend to focus on the things that are
  new, exciting and seemingly important at a technology level. Consequently we
  put less emphasis on things that are more important in the context of an (often
  large) public administration. But consider someone wanting to roll out a
  set of technologies in an organization that intends to stick with it for a long
  time. Since disruptive change is difficult and expensive, it is far more
  important to have documentation of the things that will not work, so they can
  be avoided or worked around, than it is to know that some future version will
  behave much better. It is unlikely that that new version will ever be
  practically available to the users currently under consideration, and it is far
  easier to deal with known issues pro-actively than to be forced to react to
  surprises.  Today's documented bug is, ironically, often preferable to
  tomorrow's fix with unforeseeable side effects.
  
  In a large organization that uses software for a long time, the cost of acquiring
  the software, be it via licenses or as part of contracted custom development of
  Free Software, pales in comparison to the cost of maintaining and supporting it.
  This leads to the thinking that fewer, more stable features, which cause less load
  on the support organization and are more reliable and less maintenance intensive
  are better than new, complex and likely less mature bells and whistles.
  
  While both of these sentiments run counter to the instincts of Free Software
  developers, it is these same aspects that make it very attractive for the
  public sector to contract the development of Free Software, rather than
  spending the money on licenses for off-the-shelf products. Starting from a
  large pool of freely available software, the organization can invest the
  budgets it has into maturing exactly those parts that are relevant for its own
  operations. It thus does not have to pay (via license costs) for the development of
  market driven, fancy features it will not need. By submitting all of that work
  back upstream into the community, the longer term maintenance of these
  improvements and of the base software is shared amongst many. Additionally,
  because all of the improvements become publicly available, other
  organizations with similar needs can benefit from them with no
  additional cost, thus maximizing the impact of tax payer money,
  something any public administration is (or should be) keen to do.
  
  \section*{Procurement}
  
  So, if it is so clearly better use of IT budgets for government agencies to invest
  into the improvement of Free Software and into the tailoring of it to its needs, why is it
  so rarely done? Feature parity for many of the most important kinds of software has
  long been reached, usability is comparable, robustness and total cost of ownership
  as well. Mindshare and knowledge are of course still problems, but the key practical obstacle
  for procurement of Free Software services lies in the legal and administrative
  conditions under which it must happen. Changing these conditions requires work
  on a political and lobby level. In the context of an individual project it is
  rarely possible. Thankfully organizations like the Free Software Foundation Europe and
  its sister organization in the US are lobbying on our behalf and slowly effecting
  change. Let's look at two central, structural problems.
  
  \paragraph*{Licenses, not Services}
  
  Many IT budgets are structured such that part of the money is set aside
  for the purchase of new software or the continued payment for the use of software
  in the form of licenses. Since it was unimaginable to those who structured these
  budgets that software could ever be anything but a purchasable good, represented
  by a proprietary license, it is often difficult or impossible for the IT decision
  makers to spend that same money on services. Managerial accounting will simply not hear of it.
  This can lead to the unhappy situation that an organization has the will and the
  money to improve a piece of Free Software to exactly suit its needs, deploy and run
  it for years and contribute the changes back to community, yet the plan can not
  go forward unless the whole affair is wrapped in an artificial and unnecessary sale
  and purchase of an imaginary product based on the Free Software license.
  
  \paragraph*{Legal Traps}
  
  Contractual frameworks for software providers often assume
  that whoever signs up to provide the software fully controls all of the involved 
  copyrights, trademarks and patents. The buying organization expects to be indemnified against various
  risks by the provider. In the case of a company or an individual providing a solution
  or service based on Free Software that is often impossible since there are other
  rights holders that can not reasonably be involved in the contractual arrangement.
  This problem appears most pointedly in the context of software patents. It is practically
  impossible for a service provider to insure against patent litigation risks which makes
  it very risky to take on the full responsibility.
  
  \section*{Price}
  
  Historically, the key selling point of Free Software that has been communicated
  to the wider public has been its potential to save money.
  Free Software has indeed made large scale cost
  saving possible in many organizations and for many years now. 
  The GNU/Linux operating system has spearheaded this development.
  Because of its free availability for download was perceived in stark contrast 
  to the expensive licenses of its main competitor, Microsoft Windows.
  For something as
  widely used and useful as an operating system, the structural cost benefit of
  development cost put onto many shoulders is undeniable.  Unfortunately the
  expectation that this holds true for all Free Software products has led to the
  unrealistic view that using it will always, immediately and greatly reduce
  cost. In our experience, this is not true. As we have seen in earlier sections
  it does make a lot of sense to get more out of the money spent using Free
  Software and it is likely that over time and across multiple organizations
  money can be saved, but for the individual agency looking to deploy a piece of
  Free Software there will be an upfront investment and cost associated with
  getting it to the point of maturity and robustness required.
  
  While this seems entirely reasonable to IT operations
  professionals it is often harder to convince their superiors with budget power
  of this truth. Especially when potential cost saving has been used as an
  argument to get Free Software in the door initially it can prove very
  challenging to effectively manage expectations down the road. The earlier the
  true cost and nature of the investment is made transparent to decision makers,
  the more likely they are to commit to it for the long haul. 
  High value for money is still attractive and a software services provider that will
  not continue to be available because the high price pressure does not yield
  sufficient economic success is as unattractive in Free Software as it is in
  proprietary license based business models. It is thus also in the interest of the
  customers that cost estimations are realistic and the economic conditions of the
  work being done are sustainable.
  
  \section*{Conclusion}
  
  Our experience shows that it is possible to convince organizations in
  the public sector to spend money on Free Software based services. It is
  an attractive proposition that provides good value and makes political
  sense. Unfortunately structural barriers still exist, but with the help
  of pioneers in the public sector they can be worked around. Given
  sufficient support by us all, those working for Free Software on a political
  level will eventually overcome them. Honest and clear
  communication of the technical and economic realities can foster
  effective partnerships that yield benefits for the Free Software community,
  the public administrations using the software and those providing them
  with the necessary services in an economically viable, sustainable way.
